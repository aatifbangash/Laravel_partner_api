{
  "openapi": "3.0.0",
  "info": {
    "title": "OB Orangutan Partner API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/banners": {
      "get": {
        "tags": [
          "banners"
        ],
        "summary": "Retrieve all banners",
        "operationId": "getBanners",
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/culture"
            }
          },
          {
            "name": "type[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/bannerType"
              }
            }
          },
          {
            "name": "categoryId[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/categoryId"
              }
            }
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/channel"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns website banners.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Retrieve all categories",
        "operationId": "getCategories",
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/culture"
            }
          },
          {
            "name": "urlPathSegment",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/categoryUrlPathSegment"
            }
          },
          {
            "name": "depth",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Exclude categories with larger depth from root or given parentId.",
              "example": 2
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/categoryId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/clicks": {
      "post": {
        "tags": [
          "clicks"
        ],
        "summary": "Creates and returns a redirect url",
        "operationId": "createClick",
        "requestBody": {
          "$ref": "#/components/requestBodies/clickRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns redirect information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/confirmations": {
      "post": {
        "tags": [
          "confirmations"
        ],
        "summary": "Confirm token",
        "operationId": "confirmToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/confirmationRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns the confirmation result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_3"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/confirmations/passwordLost": {
      "post": {
        "tags": [
          "confirmations"
        ],
        "summary": "Set new password",
        "operationId": "resetLostPassword",
        "requestBody": {
          "$ref": "#/components/requestBodies/passwordLostResetRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that is returned on successfull password reset.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deals": {
      "get": {
        "tags": [
          "deals"
        ],
        "summary": "Retrieve deals",
        "operationId": "getDeals",
        "parameters": [
          {
            "name": "categoryId[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/categoryId"
              }
            }
          },
          {
            "name": "culture",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/culture"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "description": "adminTop: Returns deals marked by content management as top deals. expiring: Returns deals ordered by expiry date ascending. newest: Returns deals ordered by creation date descending. popular: Returns deals marked by content management as top deals.  themeBase: Returns deals not marked as top deal for themeId. Requires themeId query. themeTop: Returns deals marked as top deal for themeId. Requires themeId query.",
              "enum": [
                "adminTop",
                "expiring",
                "newest",
                "popular",
                "themeBase",
                "themeTop"
              ]
            }
          },
          {
            "name": "isExclusive",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dealIsExclusive"
            }
          },
          {
            "name": "dealType",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dealType"
            }
          },
          {
            "name": "dealType[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/dealType"
              }
            }
          },
          {
            "name": "keywords",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "storeId[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/storeId"
              }
            }
          },
          {
            "name": "themeId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/themeId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns deals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_5"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/deals/{dealId}": {
      "get": {
        "tags": [
          "deals"
        ],
        "summary": "Retrieve deal by dealId",
        "operationId": "getDeal",
        "parameters": [
          {
            "name": "dealId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/dealId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a deal.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dealModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/giftcards": {
      "get": {
        "tags": [
          "giftcards"
        ],
        "summary": "retrieve all active giftcards",
        "operationId": "getGiftcards",
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/culture"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "description": "Exclude giftcards with a larger amount than given in query, 2 decimals.",
              "example": 25
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns active giftcards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_6"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores": {
      "get": {
        "tags": [
          "stores"
        ],
        "summary": "Retrieve all stores",
        "operationId": "getStores",
        "parameters": [
          {
            "name": "categoryId[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/categoryId"
              }
            }
          },
          {
            "name": "culture",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/culture"
            }
          },
          {
            "name": "dealType[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/dealType"
              }
            }
          },
          {
            "name": "hasDeals",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "keywords",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "highestCommision",
                "highestCashBack",
                "adminTop",
                "mostClicked",
                "mostTransactions",
                "newestStores",
                "foreignStores"
              ]
            }
          },
          {
            "name": "storeId[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/storeId"
              }
            }
          },
          {
            "name": "urlPathSegment",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/storeUrlPathSegment"
            }
          },
          {
            "name": "themeId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/themeId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns stores.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_7"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/{storeId}": {
      "get": {
        "tags": [
          "stores"
        ],
        "summary": "Retrieve store by id",
        "operationId": "getStore",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/storeId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stores/{storeId}/calculations": {
      "post": {
        "tags": [
          "stores"
        ],
        "summary": "Make a sample cashback calculation for store purchase",
        "operationId": "calculateStoreCashback",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/storeId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/storeCalculationRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a cashback calculation result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/themes": {
      "get": {
        "tags": [
          "categories"
        ],
        "summary": "Retrieve all themes",
        "operationId": "getThemes",
        "parameters": [
          {
            "name": "culture",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/culture"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginized response model that returns themes.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/passwordResetRequest": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Request password reset for user",
        "operationId": "requestPasswordReset",
        "requestBody": {
          "$ref": "#/components/requestBodies/passwordResetRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve user by id",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Save user details for registered user",
        "operationId": "saveUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/balances": {
      "get": {
        "tags": [
          "balances"
        ],
        "summary": "Retrieve balance by userId",
        "operationId": "getUserBalance",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "referralId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/referralId"
            }
          },
          {
            "name": "sourceUserId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          },
          {
            "name": "groupBy[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Group the result per wallet, source user, and or per referralId.",
                "example": "walletId",
                "enum": [
                  "referralId",
                  "sourceUserId",
                  "walletId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginized response model that returns a user balance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_11"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/bankAccounts": {
      "get": {
        "tags": [
          "bank accounts"
        ],
        "summary": "Retrieve bank account by userId",
        "operationId": "getUserBankAccount",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns an bank account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bankAccountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "bank accounts"
        ],
        "summary": "Set bankaccount for userId",
        "operationId": "setUserBankAccount",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userBankAccountRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns an bank account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bankAccountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "bank accounts"
        ],
        "summary": "Delete bank account by userId",
        "operationId": "deleteUserBankAccount",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/clicks": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retreive clicks by userId",
        "operationId": "getUserClicks",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "subId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/clickSubId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginized response model that returns all clicks.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_12"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/clicks/{clickId}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retreive click by clickId and userId",
        "operationId": "getUserClick",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "clickId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/clickId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a click.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/clickModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/directDebitMandates": {
      "get": {
        "tags": [
          "direct debits"
        ],
        "summary": "Retrieve all direct debit mandates for userId",
        "operationId": "getDirectDebitMandates",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns all direct debit mandate information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_13"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/directDebitMandates/{directDebitMandateId}": {
      "get": {
        "tags": [
          "direct debits"
        ],
        "summary": "Retrieve a direct debit mandate by directDebitMandateId",
        "operationId": "getDirectDebitMandate",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "directDebitMandateId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/directDebitMandateId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a direct debit mandate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_14"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/directDebitMandates/{directDebitMandateId}/status": {
      "post": {
        "tags": [
          "direct debits"
        ],
        "summary": "Set status for direct debit mandate",
        "operationId": "setDirectDebitStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "directDebitMandateId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/directDebitMandateId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/directDebitMandateStatusRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a direct debit mandate.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_14"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/distributions": {
      "get": {
        "tags": [
          "distributions"
        ],
        "summary": "Retreive cashback distribution model for given userId",
        "operationId": "getUserDistributions",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginized response model that returns a distribution model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_15"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "distributions"
        ],
        "summary": "Save cashback distribution model for given userId",
        "operationId": "setUserDistributions",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userDistributionsRequest"
        },
        "responses": {
          "200": {
            "description": "A paginized response model that returns a distribution model.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_15"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/emailChangeRequest": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Change email request",
        "operationId": "createEmailChangeRequest",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userEmailChangeRequestRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/favoriteCategories": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Retrieve favorite categories by userId",
        "operationId": "getUserCategories",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user favorite categories.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_16"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/favoriteCategories/{categoryId}": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Retreive favorite settings for given categoryId and userId",
        "operationId": "getUserCategory",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/categoryId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns user favorite setting for a store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favoriteStoreModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Set given categoryId as favorite for given userId",
        "operationId": "setUserCategory",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/categoryId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns user favorite setting for a store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favoriteStoreModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Delete categoryId as favorite for given userId",
        "operationId": "deleteUserCategory",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/categoryId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/favoriteStores": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Retrieve favorite stores by userId",
        "operationId": "getUserStores",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user favorite stores.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_17"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/favoriteStores/{storeId}": {
      "get": {
        "tags": [
          "favorites"
        ],
        "summary": "Retrieve favorite store by userId",
        "operationId": "getUserStore",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/storeId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns user favorite setting for a store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favoriteStoreModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "favorites"
        ],
        "summary": "Set favorite settings for given userId and storeId",
        "operationId": "setUserStore",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/storeId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userStoreFavoriteRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns user favorite setting for a store.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favoriteStoreModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "favorites"
        ],
        "summary": "Remove a given storeId as favorite for given userId",
        "operationId": "deleteUserStore",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "storeId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/storeId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/friends": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve referred friends by userId",
        "operationId": "getUserFriends",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user friends.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_18"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/mailingLists": {
      "get": {
        "tags": [
          "mailing lists"
        ],
        "summary": "Retrieve mailing lists available for userId",
        "operationId": "getUserMailingLists",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns mailing lists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_19"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/mailingLists/{mailingListId}": {
      "get": {
        "tags": [
          "mailing lists"
        ],
        "summary": "Retrieve mailing list details for given userId and mailingListId",
        "operationId": "getUserMailingList",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "mailingListId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/mailingListId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a mailing list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mailingListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "mailing lists"
        ],
        "summary": "Set preferences for given userId and mailingListId",
        "operationId": "setUserMailingList",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "mailingListId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/mailingListId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userMailingListRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a mailing list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mailingListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/mailingLists/suspend": {
      "get": {
        "tags": [
          "mailing lists"
        ],
        "summary": "Retrieve suspension period settings by userId",
        "operationId": "getUserMailingListsSuspension",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns the mailing list suspend dates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_20"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "mailing lists"
        ],
        "summary": "Set suspension period for userId",
        "operationId": "setUserMailingListSuspension",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userMailingListSuspendRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns the mailing list suspend dates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_20"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "mailing lists"
        ],
        "summary": "Delete suspension period for userId",
        "operationId": "deleteUserMailingListSuspension",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns the mailing list suspend dates.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_20"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Retrieve messages by userId",
        "operationId": "getUserMessages",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "messageType[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/messageType"
              }
            }
          },
          {
            "name": "messageStatus",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/messageStatus"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user messages.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_21"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/messages/read": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Set messages for filtered messages as read",
        "operationId": "setUserMessagesRead",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userMessagesRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/messages/{messageId}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Retrieve messages by messageId",
        "operationId": "getUserMessage",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/messageId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns an user message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/messages/{messageId}/read": {
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Set given messageId as read",
        "operationId": "setUserMessageRead",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/messageId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userMessageRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns an user message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/messageModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payouts": {
      "get": {
        "tags": [
          "payouts"
        ],
        "summary": "Retrieve payout requests by userId",
        "operationId": "getUserPayouts",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "payoutStatus",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/payoutStatus"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user payouts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_22"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Request payout for user",
        "operationId": "requestPayoutV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userPayoutRequestV2"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a payout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payoutModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payouts/{payoutId}": {
      "get": {
        "tags": [
          "payouts"
        ],
        "summary": "Retrieve a payout request by payoutId and userId",
        "operationId": "getUserPayout",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "payoutId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/payoutId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a payouts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payoutModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Request payout for user",
        "operationId": "requestPayout",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "payoutId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/payoutId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userPayoutRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a payouts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payoutModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payouts/{payoutId}/status": {
      "post": {
        "tags": [
          "payouts"
        ],
        "summary": "Set payout status by payoutId",
        "description": "This operation allowes users to cancel a pending payout request.",
        "operationId": "setPayoutStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "payoutId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/payoutId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userPayoutStatusRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a payouts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payoutModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payoutsV2": {
      "get": {
        "tags": [
          "payouts"
        ],
        "summary": "Retrieve payout requests by userId",
        "operationId": "getUserPayoutsV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "payoutStatus",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/payoutStatus"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          },
          {
            "name": "uniqueCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/uniqueCode"
            }
          },
          {
            "name": "payoutMethod[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/payoutMethod"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user payouts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_23"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/payoutsV2/{payoutId}": {
      "get": {
        "tags": [
          "payouts"
        ],
        "summary": "Retrieve a payout request by payoutId and userId",
        "operationId": "getUserPayoutV2",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "payoutId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/payoutId"
            }
          },
          {
            "name": "uniqueCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/uniqueCode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a payout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payoutModelV2"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/preferences": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Retrieve preferences by userId",
        "operationId": "getUserPreferences",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns user preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_24"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Set preferences for userId",
        "operationId": "setUserPreferences",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userPreferencesRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns user preferences.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_24"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/register": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create user with id",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userRegisterRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a registered user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/registerSenicom": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create user with id for Senicom",
        "operationId": "createUserSenicom",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userRegisterSenicomRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a registered user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/registerSniptech": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create user with id for Sniptech",
        "operationId": "createUserSniptech",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userRegisterSniptechRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a registered user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/status": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Set status for user",
        "operationId": "setUserStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userStatusRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/tickets": {
      "get": {
        "tags": [
          "tickets"
        ],
        "summary": "Retrieve tickets by userId",
        "operationId": "getUserTickets",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user tickets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_25"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tickets"
        ],
        "summary": "Create a ticket",
        "operationId": "createTicket",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userTicketRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/tickets/{ticketId}": {
      "get": {
        "tags": [
          "tickets"
        ],
        "summary": "Retrieve ticket details by ticketId",
        "operationId": "getUserTicket",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/ticketId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/tickets/{ticketId}/reply": {
      "post": {
        "tags": [
          "tickets"
        ],
        "summary": "Create a reply on a ticket",
        "operationId": "addReply",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "ticketId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/ticketId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userTicketReplyRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a ticket.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/transactions": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Retrieve transactions by userId",
        "operationId": "getUserTransactions",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          },
          {
            "name": "status[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/transactionStatus"
              }
            }
          },
          {
            "name": "eventSource[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/transactionEventSource"
              }
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_26"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "transactions"
        ],
        "summary": "Retrieve transaction by transactionId",
        "operationId": "getUserTransaction",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/transactionId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a transactions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactionModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets": {
      "get": {
        "tags": [
          "wallets"
        ],
        "summary": "Retrieve wallets by userId",
        "operationId": "getUserWallets",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletStatus",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/walletStatus"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/dateTime"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated response model that returns user wallets.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_27"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}": {
      "get": {
        "tags": [
          "wallets"
        ],
        "summary": "Retrieve wallet by walletId",
        "operationId": "getWallet",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns a wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/walletModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "wallets"
        ],
        "summary": "Set wallet by walletId",
        "operationId": "saveWallet",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userWalletRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/walletModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "wallets"
        ],
        "summary": "Delete wallet by walletId",
        "operationId": "deleteWallet",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A response model that returns success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/balances": {
      "get": {
        "tags": [
          "balances"
        ],
        "summary": "Retrieve balance of wallet",
        "operationId": "getWalletBalance",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Number of the page returned",
              "example": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "description": "Maximum page size.",
              "example": 100
            }
          },
          {
            "name": "referralId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/referralId"
            }
          },
          {
            "name": "sourceUserId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "groupBy[]",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Group the result per wallet, source user, and or per referralId.",
                "example": "walletId",
                "enum": [
                  "referralId",
                  "sourceUserId",
                  "walletId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginized response model that returns a wallet balance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_11"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/name": {
      "post": {
        "tags": [
          "wallets"
        ],
        "summary": "Set wallet name by walletId",
        "operationId": "setWalletName",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userWalletNameRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/walletModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/wallets/{walletId}/status": {
      "post": {
        "tags": [
          "wallets"
        ],
        "summary": "Set wallet status by walletId",
        "operationId": "setWalletStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/userId"
            }
          },
          {
            "name": "walletId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/walletId"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/userWalletStatusRequest"
        },
        "responses": {
          "200": {
            "description": "A response model that returns a wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/walletModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unable to process the contained instructions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/errorModel"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "amount": {
        "type": "number",
        "description": "Money, 2 decimals.",
        "example": 10.29
      },
      "attachmentUrl": {
        "type": "string",
        "description": "Url to attachment hosted in orangebuddies CDN.",
        "format": "url",
        "example": "https://static.orangebuddies.com/uploads02/www.shopbuddies.nl/credit_tickets/7609962c6fa1a99ddfb3ddd5dc826e7716521777283281033.png"
      },
      "bankAccountHolderName": {
        "type": "string",
        "description": "Holder name for bank account.",
        "example": "J. Doe"
      },
      "AccountHolderCity": {
        "type": "string",
        "description": "Residence of the bankaccount holder.",
        "example": "Amsterdam"
      },
      "bannerId": {
        "type": "string",
        "description": "Unique identifier for banner.",
        "example": "b-4252"
      },
      "bannerType": {
        "type": "string",
        "description": "Type of banner.",
        "example": "SkyScraperWrapper120x600",
        "enum": [
          "SkyScraperWrapper120x600",
          "Slider",
          "Slider720x200",
          "ExitPage468x60",
          "Popupbanner",
          "Categorybanner",
          "AppPopupbanner",
          "SBShomeslider850x300",
          "MegaBanner1000x500",
          "SBSSkyscraper160x600",
          "ClickBanner468x60",
          "ThemeBanner505x140"
        ]
      },
      "cashbackCompetitor": {
        "type": "number",
        "description": "cashback percentage that is given on one of our competitor websites. Decimal value between 0 and 100.",
        "example": 5
      },
      "cashbackPartner": {
        "type": "number",
        "description": "cashback amount that is given on one of our own websites. Decimal value between 0 and 100.",
        "example": 4
      },
      "categoryDescription": {
        "type": "string",
        "description": "a description for category.",
        "example": "Of je nou op zoek bent naar de nieuwste game, een leuke film of het nieuwe album van je favoriete band; je shopt het online bij deze webshops. Daarnaast profiteer je meteen van extra voordeel, zoals kortingsacties, een sale of cashback acties."
      },
      "categoryId": {
        "type": "string",
        "description": "Unique identifier for category.",
        "example": "12a"
      },
      "categoryBannerImageUrl": {
        "type": "string",
        "description": "Url to deal image hosted in orangebuddies CDN with 1140x250 px format.",
        "format": "url",
        "example": "https://static.orangebuddies.com/image/category/3_1547.jpg"
      },
      "categoryName": {
        "type": "string",
        "description": "Category name.",
        "example": "Games, Films & Music"
      },
      "categoryUrlPathSegment": {
        "type": "string",
        "description": "Representation of category name to use in url paths.",
        "example": "Games-films-music"
      },
      "cashbackType": {
        "type": "string",
        "description": "currency: Cashback reward is fixed amount. percentage: Cashback reward is calculated as percentage of purchase amount (excl VAT). none: User will not earn cashback.",
        "example": "percentage",
        "enum": [
          "currency",
          "percentage",
          "none"
        ]
      },
      "channel": {
        "type": "string",
        "description": "app: App channel. web: Website/browser channel.",
        "example": "web",
        "enum": [
          "app",
          "web"
        ]
      },
      "clickEventSource": {
        "type": "string",
        "description": "describes last step in path the user followed to get redirected. store: Redirected from store (store page, store cards) deal: Redirected from specific deal (deal cards) banner: Redirected from specific banner link: Redirected through unique link, e.g. email campaings, shared urls, etc.",
        "example": "cashback",
        "enum": [
          "store",
          "deal",
          "banner",
          "link"
        ]
      },
      "clickEventSourceId": {
        "type": "string",
        "description": "reference to Click Event Source specifications by Id. Content and meaning varying per Click Event Source value: - store: storeId - deal: dealId - banner: bannerId - link: linkId",
        "example": "1234"
      },
      "clickId": {
        "type": "string",
        "description": "Unique identifier for click.",
        "example": "12345113"
      },
      "clickSubId": {
        "type": "string",
        "description": "Tracking key of the deal redirect.",
        "example": "167-OBS-61430bca4e110167"
      },
      "competitorUrl": {
        "type": "string",
        "description": "Url from a competitor cashback website.",
        "format": "url",
        "example": "https://www.cashbackxl.nl/webshops/kwalitaria"
      },
      "confirmationStatus": {
        "type": "string",
        "description": "confirmed: The token is successfully used processing the adjacent confirmationEvent. failed: The token is not valid. pending: The token is valid, and can be used process the adjecent confirmationEvent.",
        "example": "confirmed",
        "enum": [
          "confirmed",
          "pending",
          "failed"
        ]
      },
      "confirmationEventType": {
        "type": "string",
        "description": "passwordLost: User requested a password reset. Should continue by posting new password on /confirmations/passwordLost. emailChange: Confirmation for email change request. bankAccountChange: Confirmation for default bank account change request. accountActivation: Confirmation for account activation. accountActivationSetPassword: Confirmation for account activation. Must continue by posting new password on /confirmations/passwordLost. payout: Confirmation for payout request.",
        "example": "accountActivation",
        "enum": [
          "passwordLost",
          "emailChange",
          "bankAccountChange",
          "accountActivation",
          "accountActivationSetPassword",
          "payout"
        ]
      },
      "confirmationToken": {
        "type": "string",
        "description": "A generated token to confirm a request.",
        "example": "c3VwZXJfc2VjcmV0"
      },
      "culture": {
        "type": "string",
        "description": "Language culture names. Combination of ISO 639-1 (language codes) and ISO 3166-1 alpha-2 (two-letter country codes).",
        "example": "en-GB",
        "enum": [
          "da-DK",
          "de-DE",
          "cs-CZ",
          "en-GB",
          "es-ES",
          "fi-FI",
          "fr-BE",
          "fr-FR",
          "it-IT",
          "nl-NL",
          "nl-BE",
          "no-NO",
          "pl-PL",
          "se-SE"
        ]
      },
      "currency": {
        "type": "string",
        "description": "3 letter currency code as defined by ISO-4217.",
        "format": "iso-4217",
        "example": "EUR",
        "default": "EUR",
        "enum": [
          "CZK",
          "DKK",
          "EUR",
          "GBP",
          "NOK",
          "PLN",
          "SEK",
          "USD"
        ]
      },
      "date": {
        "type": "string",
        "description": "Date.",
        "format": "date",
        "example": "2021-01-30"
      },
      "dateTime": {
        "type": "string",
        "description": "Date and time.",
        "format": "date-time",
        "example": "2021-01-30T08:30:00Z"
      },
      "dealId": {
        "type": "string",
        "description": "Unique identifier for deal.",
        "example": "12345"
      },
      "dealImageUrl": {
        "type": "string",
        "description": "Url to deal image hosted in orangebuddies CDN with 261x111 px format.",
        "format": "url",
        "example": "https://static.orangebuddies.com/image/vouchers/v_822598.jpg"
      },
      "dealIsExclusive": {
        "type": "boolean",
        "description": "Deal is marked as exclusive.",
        "example": false
      },
      "dealType": {
        "type": "string",
        "description": "deal: Standard cashback deal (default). code: Deal with voucher code. promotion: Product discount or promotion deal. manufacturer: Manufacturer cashback deal. daily: Daily deal.",
        "example": "deal",
        "enum": [
          "deal",
          "code",
          "promotion",
          "manufacturer",
          "daily"
        ]
      },
      "directDebitMandateId": {
        "type": "string",
        "description": "Unique identifier for direct debit mandate.",
        "example": "12345"
      },
      "email": {
        "type": "string",
        "description": "Email address.",
        "format": "email",
        "example": "email@example.com"
      },
      "firstName": {
        "type": "string",
        "description": "First name.",
        "example": "John"
      },
      "gender": {
        "type": "string",
        "description": "Gender.",
        "example": "male",
        "enum": [
          "male",
          "female",
          "other"
        ]
      },
      "giftcardId": {
        "type": "string",
        "description": "Unique identifier for giftcard.",
        "example": "1354"
      },
      "giftcardImageUrl": {
        "type": "string",
        "description": "Url to giftcard image hosted in orangebuddies CDN.",
        "format": "url",
        "example": "https://static.orangebuddies.com/image/cadeaus/1422.png"
      },
      "giftcardName": {
        "type": "string",
        "description": "Name of giftcard.",
        "example": "€25 Decathlon Code"
      },
      "ipAddressWan": {
        "type": "string",
        "description": "The WAN (wide-area network) IP address of the user.",
        "format": "ip",
        "example": "123.21.12.3"
      },
      "iconType": {
        "type": "string",
        "description": "Type for an icon to visually represent a category.",
        "example": "notification",
        "enum": [
          "book-open",
          "business-man",
          "calendar",
          "camera",
          "computer",
          "child",
          "direction-sign",
          "disk",
          "financial",
          "food-dome",
          "game",
          "globe",
          "heart-add",
          "heart-beat",
          "home",
          "percent-badge",
          "phone-call",
          "plug",
          "present-box",
          "shirt",
          "sport",
          "store",
          "television"
        ]
      },
      "isActive": {
        "type": "boolean",
        "description": "Item is active.",
        "example": true
      },
      "isFavorite": {
        "type": "boolean",
        "description": "Item is favorite.",
        "example": true
      },
      "lastName": {
        "type": "string",
        "description": "Last name.",
        "example": "Doe"
      },
      "iban": {
        "pattern": "ˆ[A-Z]{2}[0-9]{2}[A-Z0-9]{30}$",
        "type": "string",
        "description": "International Bank Account Number.",
        "format": "IBAN",
        "example": "NL86INGB0002445588"
      },
      "mailingListId": {
        "type": "string",
        "description": "Unique identifier for mailing list.",
        "example": "321"
      },
      "messageId": {
        "type": "string",
        "description": "Unique identifier for message. Will contain prefix to recognize messageType. n- for notification p- for promotion t- for ticket ",
        "example": "n-312313"
      },
      "messageStatus": {
        "type": "string",
        "description": "Status of the message.",
        "example": "unread",
        "enum": [
          "read",
          "unread"
        ]
      },
      "messageType": {
        "type": "string",
        "description": "notification: Message addressing user transaction updates. promotion: Message regarding relevant promotions. ticket: Message addressing a support ticket submitted by the user, indicating status updates or received responses/requests.",
        "example": "notification",
        "enum": [
          "notification",
          "promotion",
          "ticket"
        ]
      },
      "navigationIcon": {
        "type": "string",
        "description": "Fontawesome icon code which is used as icon in the navigation bar.",
        "example": "fa-fa-book"
      },
      "navigationName": {
        "type": "string",
        "description": "Name which is used in the navigation bar.",
        "example": "School"
      },
      "password": {
        "type": "string",
        "description": "The user's password.",
        "format": "password",
        "example": "P4$SWORD!-aGsa-111%!à"
      },
      "payoutId": {
        "type": "string",
        "description": "Unique identifier for payout.",
        "example": "541a"
      },
      "payoutMethod": {
        "type": "string",
        "description": "bank: Payout requested via bank. giftcard: Payout requested with gifcard. paypal: Payout requested via paypal.",
        "example": "bank",
        "enum": [
          "bank",
          "giftcard",
          "paypal"
        ]
      },
      "payoutStatus": {
        "type": "string",
        "description": "requested: Payout request requires confirmation by the user. pending: Payout is requested and requires confirmation by admin before payment. confirmed: Payout is requested and paid. declined: Payout is declined and not paid. canceled: Payout is cancelled by user and not paid.",
        "example": "confirmed",
        "enum": [
          "requested",
          "pending",
          "confirmed",
          "declined",
          "cancelled"
        ]
      },
      "phone": {
        "type": "string",
        "description": "Phone number.",
        "example": "310201234567"
      },
      "prefixName": {
        "type": "string",
        "description": "Prefix.",
        "example": "van"
      },
      "referralId": {
        "type": "string",
        "description": "External identifier to trace the cashback distribution.",
        "example": "a151ee2d-163d-47b8-9ed4-5a8e30dd0005"
      },
      "storeId": {
        "type": "string",
        "description": "Unique identifier for store.",
        "example": "12345"
      },
      "storeLogoUrl": {
        "type": "string",
        "description": "Url to store logo hosted in orangebuddies CDN with 120x60px format or SVG with 2:1 aspect ratio.",
        "format": "url",
        "example": "https://static.orangebuddies.com/image/stores/125557.jpg"
      },
      "storeLogoSquareUrl": {
        "type": "string",
        "description": "Url to store logo hosted in orangebuddies CDN with 600x600px format or SVG with 1:1 aspect ratio.",
        "format": "url",
        "example": "https://static.orangebuddies.com/image/stores/125557-sq.svg"
      },
      "storeName": {
        "type": "string",
        "description": "Name of webstore.",
        "example": "bol.com"
      },
      "storeType": {
        "type": "string",
        "description": "deals: Cost-Per-Action and Cost-Per-Lead stores offers rewarding for specific actions, examples: newsletter subscription, contract signing. sale: Cost-Per-Sale store rewarding cashback on purchases. cpc: Cost-Per-Click store rewarding banner and product clicks.",
        "example": "sales",
        "enum": [
          "deals",
          "sale",
          "cpc"
        ]
      },
      "storeUrlPathSegment": {
        "type": "string",
        "description": "Representation of store name to use in url paths.",
        "example": "hemanl"
      },
      "themeBannerImageUrl": {
        "type": "string",
        "description": "Url to theme banner image hosted in orangebuddies CDN.",
        "format": "url",
        "example": "https://static.orangebuddies.com/image/category/3_1547.jpg"
      },
      "themeId": {
        "type": "string",
        "description": "Unique identifier for theme.",
        "example": "312"
      },
      "themeName": {
        "type": "string",
        "description": "Short name for theme in Master.",
        "example": "Back to School 2022"
      },
      "themeTitle": {
        "type": "string",
        "description": "title used on themepage for theme.",
        "example": "Back to School 2022"
      },
      "themeUrlPathSegment": {
        "type": "string",
        "description": "Representation of theme name to use in url paths.",
        "example": "xmass"
      },
      "ticketId": {
        "type": "string",
        "description": "Unique identifier for ticket.",
        "example": "312ABC"
      },
      "ticketStatus": {
        "type": "string",
        "description": "new: Ticket is submitted and not yet processed by OB customer support. answered: Ticket waits for user reply. open: Ticket reply is submitted by user and not yet processed by OB customer support. closed: Ticket is closed.",
        "example": "open",
        "enum": [
          "new",
          "answered",
          "open",
          "closed"
        ]
      },
      "ticketType": {
        "type": "string",
        "description": "advertising: tickets regarding advertising/marketing myAccount: tickets about user account other: other related tickets problemOnWebsite: tickets regarding bugs on website suggestion: suggestion from user about platform problemWithStoreLink: ticket regarding incorrect redirect link to webstore purchaseNotRegistered: claim missed cashback. cashbackAmountInvalid: dispute calculated cashback amount. purchaseRejected: dispute rejected cashback. claimCashbackGuarantee: claim higher cashback because competitor provides more cashback. pendingCashback: ticket to request update on pending transaction",
        "example": "purchaseNotRegistered",
        "enum": [
          "advertising",
          "myAccount",
          "other",
          "problemOnWebsite",
          "suggestion",
          "problemWithStoreLink",
          "purchaseNotRegistered",
          "cashbackAmountInvalid",
          "purchaseRejected",
          "claimCashbackGuarantee",
          "pendingCashback"
        ]
      },
      "transactionId": {
        "type": "string",
        "description": "Unique identifier for transaction.",
        "example": "83736581"
      },
      "transactionEventSource": {
        "type": "string",
        "description": "activations: Rewards for service activations, e.g. notifications, mailings, login after long inactivity, affiliate network mailings. aging: Rewards for birthdays. cashback: Reward for purchages (default). click: Rewards for clicking banners and links. customerCare: Compensations assiged by customer care processes. debitCollection: Debit collections and reversals. distribution: Amounts distributed to other wallets than the source user default wallet. download: Rewards for downloading and/or installing software. gaming: Gaming gains and losses. onboarding: Reward for registering an account. panel: Reward for participating in a panel questionaire. payout: Payout to bank. referrals: Rewards for friend referrals and friend purchages. reversal: Reversal of a precending transaction, e.g. payout in case of bounce. review: Rewards for writing reviews. other: Escape for compatibility reasons.",
        "example": "cashback",
        "enum": [
          "activations",
          "aging",
          "cashback",
          "customerCare",
          "click",
          "distribution",
          "download",
          "debitCollection",
          "gaming",
          "onboarding",
          "panel",
          "payout",
          "referrals",
          "reversal",
          "review",
          "other"
        ]
      },
      "transactionEventSourceId": {
        "type": "string",
        "description": "reference to Transaction Event Source specifications by Id. Content and meaning varying per Transaction Event Source value: - cashback: clickId. - distribution: transactionId. - payout: payoutId. - reversal: transactionId of related reversed transaction. - referrals: userId of referred friend. - review: reviewId (if available). - customerCare: type of compensation:\n    1: Test transaction.\n    2: Compensations below 10.\n    3: Compensation from network.\n    4: Rejected transaction confirmed.\n    5: Member competition.\n    6: Cashboost compensation.\n    7: Balance transfer.\n    9: Giftshop cashout.\n    10: Highest cashback guarantee.\n    11: Online panel.",
        "example": "1234-a"
      },
      "transactionStatus": {
        "type": "string",
        "description": "pending: Transaction is assigend to user, but not confirmed by the store. confirmed: Transaction is confirmed and awaits payment by store. payable: Transaction is payable for user. declined: Transaction is rejected by store, for example in case of full return of purchaged products. claimed: Status used for bank related transaction types (payout, bouncedPayout, etc).",
        "example": "pending",
        "enum": [
          "pending",
          "confirmed",
          "payable",
          "declined",
          "claimed"
        ]
      },
      "uniqueCode": {
        "type": "string",
        "description": "Unique identifier for transaction",
        "example": "Transaction123"
      },
      "userId": {
        "type": "string",
        "description": "Unique identifier for user.",
        "example": "9c19ecd8-889c-45fe-986b-f7ec6c62c711"
      },
      "userAuthenticationMethod": {
        "type": "string",
        "description": "facebook: User is created with facebook social login. google: User is created with google social login. apple: User is created with apple social login. squirrel: User is created with squirrel username/password login. partner: User authentication is managed by partner. none: User authentication is not applicable.",
        "example": "squirrel",
        "enum": [
          "facebook",
          "google",
          "apple",
          "squirrel",
          "partner",
          "none"
        ]
      },
      "userOptOutType": {
        "type": "string",
        "description": "noShopping: User does not actively shop online. usingOther: User is using other cashback website or platform. unstatisfied: User expirianced other than expected service. tooMuchEmail: User is not statisfied on the amount of received email. other: Other than above. Optionally a opt out reason can be submitted. test: optOutType to immediate delete all user data and related records. Only allowed for parter test keys.",
        "example": "noShopping",
        "enum": [
          "noShopping",
          "usingOther",
          "unsatisfied",
          "tooMuchEmail",
          "other",
          "test"
        ]
      },
      "userAutoPayoutLevel": {
        "type": "string",
        "description": "Indicates on which cashback status a payout request must be auto generated for given user.  If not provided none is set as default.",
        "example": "none",
        "enum": [
          "none",
          "pending",
          "payable",
          "confirmed"
        ]
      },
      "userStatus": {
        "type": "string",
        "description": "pending: User created but account not confirmed. active: Active account. blocked: User is not available, must set to active by admin first. offboarding: User requested to close account. When balance is setteld the status will be set to closed. closed: User account is closed and data is/will be cleaned shortly, reactivation not allowed.",
        "example": "active",
        "enum": [
          "pending",
          "active",
          "blocked",
          "offboarding",
          "closed"
        ]
      },
      "userType": {
        "type": "string",
        "description": "Type of a user. If not provided user is used as default.",
        "example": "user",
        "enum": [
          "user",
          "fundraiser"
        ]
      },
      "walletId": {
        "type": "string",
        "description": "Unique identifier for wallet of an user.",
        "example": "4c8e0416-7eda-45ec-b398-846522ac7f19"
      },
      "walletStatus": {
        "type": "string",
        "description": "blocked: Wallet is not available, must be set to active first. active: Wallet is active. closed: Wallet is closed and cannot be used/changed.",
        "example": "active",
        "enum": [
          "blocked",
          "active",
          "closed"
        ]
      },
      "addressModel": {
        "required": [
          "city",
          "houseNumber",
          "street",
          "zip"
        ],
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "Street.",
            "example": "Straatweg"
          },
          "houseNumber": {
            "type": "string",
            "description": "Housenumber.",
            "example": "2"
          },
          "houseNumberAddition": {
            "type": "string",
            "description": "Optional house number addition.",
            "example": "A"
          },
          "zip": {
            "type": "string",
            "description": "ZIP code.",
            "example": "1234AB"
          },
          "city": {
            "type": "string",
            "description": "City.",
            "example": "Amsterdam"
          }
        },
        "description": "A model that describes an address."
      },
      "balanceModel": {
        "type": "object",
        "properties": {
          "sourceUserId": {
            "$ref": "#/components/schemas/userId"
          },
          "referralId": {
            "$ref": "#/components/schemas/referralId"
          },
          "walletId": {
            "$ref": "#/components/schemas/walletId"
          },
          "countPendingCredits": {
            "type": "integer",
            "example": 10
          },
          "sumPendingCredits": {
            "$ref": "#/components/schemas/amount"
          },
          "countConfirmedCredits": {
            "type": "integer",
            "example": 10
          },
          "sumConfirmedCredits": {
            "$ref": "#/components/schemas/amount"
          },
          "countPayableCredits": {
            "type": "integer",
            "example": 10
          },
          "sumPayableCredits": {
            "$ref": "#/components/schemas/amount"
          },
          "countClaimedDebits": {
            "type": "integer",
            "example": 10
          },
          "sumClaimedDebits": {
            "$ref": "#/components/schemas/amount"
          },
          "sumClaimableCredits": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        },
        "description": "A model that describes a balance."
      },
      "bannerModel": {
        "type": "object",
        "properties": {
          "bannerId": {
            "$ref": "#/components/schemas/bannerId"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "dealId": {
            "$ref": "#/components/schemas/dealId"
          },
          "type": {
            "$ref": "#/components/schemas/bannerType"
          },
          "imageUrl": {
            "type": "string",
            "description": "Url to banner image hosted in orangebuddies CDN.",
            "format": "url",
            "example": "https://static.orangebuddies.com/image/banners/57370-Slider720x200.jpg"
          },
          "position": {
            "type": "string",
            "description": "Optional specification for banner positions: leftSide: Banner must be showed at left side of page. rightSide: Banner must be showed at right side of page. bothSides: Banner must be showed on both sides of page.",
            "example": "leftSide",
            "enum": [
              "leftSide",
              "rightSide",
              "bothSides"
            ]
          },
          "linkUrl": {
            "type": "string",
            "description": "Url to action, if provided overrules deal or store referral.",
            "format": "url",
            "example": "https://www.actiondeal.com"
          },
          "dateUntil": {
            "$ref": "#/components/schemas/dateTime"
          },
          "categoryIds[]": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryId"
            }
          },
          "store": {
            "$ref": "#/components/schemas/storeModel"
          }
        },
        "description": "A model that describes a website banner."
      },
      "bankAccountModel": {
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/iban"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/bankAccountHolderName"
          },
          "accountHolderDateOfBirth": {
            "$ref": "#/components/schemas/date"
          },
          "accountHolderCity": {
            "type": "string",
            "description": "City of residence of account holder.",
            "example": "Amsterdam"
          }
        },
        "description": "A model that describes a bank account."
      },
      "cashbackModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/cashbackType"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "percentage": {
            "type": "number",
            "description": "Percentage of purchase amount (excl. VAT) earned as cashback. Decimal value between 0 and 100.",
            "example": 6.5
          }
        }
      },
      "categoryModel": {
        "type": "object",
        "properties": {
          "categoryId": {
            "$ref": "#/components/schemas/categoryId"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "parentCategoryId": {
            "$ref": "#/components/schemas/categoryId"
          },
          "name": {
            "$ref": "#/components/schemas/categoryName"
          },
          "description": {
            "$ref": "#/components/schemas/categoryDescription"
          },
          "urlPathSegment": {
            "$ref": "#/components/schemas/categoryUrlPathSegment"
          },
          "bannerImageUrl": {
            "$ref": "#/components/schemas/categoryBannerImageUrl"
          },
          "icon": {
            "$ref": "#/components/schemas/iconType"
          }
        }
      },
      "clickModel": {
        "required": [
          "clickDate",
          "clickId",
          "store",
          "subId"
        ],
        "type": "object",
        "properties": {
          "clickId": {
            "$ref": "#/components/schemas/clickId"
          },
          "subId": {
            "$ref": "#/components/schemas/clickSubId"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          },
          "dealId": {
            "$ref": "#/components/schemas/dealId"
          },
          "ipAddressWan": {
            "$ref": "#/components/schemas/ipAddressWan"
          },
          "clickDate": {
            "$ref": "#/components/schemas/dateTime"
          }
        }
      },
      "dealModel": {
        "type": "object",
        "properties": {
          "dealId": {
            "$ref": "#/components/schemas/dealId"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "type": {
            "$ref": "#/components/schemas/dealType"
          },
          "title": {
            "type": "string",
            "description": "Title of deal.",
            "example": "Online Purchase"
          },
          "details": {
            "type": "string",
            "description": "Deal details.",
            "example": "Please note: only one purchase per customer"
          },
          "isActive": {
            "$ref": "#/components/schemas/isActive"
          },
          "isExclusive": {
            "$ref": "#/components/schemas/dealIsExclusive"
          },
          "imageUrl": {
            "$ref": "#/components/schemas/dealImageUrl"
          },
          "expiryDate": {
            "$ref": "#/components/schemas/date"
          },
          "voucherCode": {
            "type": "string",
            "description": "Voucher code to use in webstore checkout.",
            "example": "WIN2022"
          },
          "offerPrice": {
            "$ref": "#/components/schemas/amount"
          },
          "offerPriceOriginal": {
            "$ref": "#/components/schemas/amount"
          },
          "extraFlag": {
            "type": "string"
          },
          "theme": {
            "$ref": "#/components/schemas/themeModel"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "cashback": {
            "$ref": "#/components/schemas/cashbackModel"
          },
          "cashbackOriginal": {
            "$ref": "#/components/schemas/cashbackModel"
          },
          "urlPathSegment": {
            "$ref": "#/components/schemas/storeUrlPathSegment"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          }
        }
      },
      "directDebitMandateModel": {
        "type": "object",
        "properties": {
          "directDebitMandateId": {
            "$ref": "#/components/schemas/directDebitMandateId"
          },
          "iban": {
            "$ref": "#/components/schemas/iban"
          },
          "accountHolderName": {
            "$ref": "#/components/schemas/bankAccountHolderName"
          },
          "isActive": {
            "$ref": "#/components/schemas/isActive"
          },
          "mandateIdentification": {
            "maxLength": 35,
            "type": "string",
            "description": "Unique Mandate Reference, known by user.",
            "example": "MYAPP-1234"
          },
          "signedDate": {
            "$ref": "#/components/schemas/date"
          },
          "signingDetails": {
            "maxLength": 200,
            "type": "string",
            "description": "Optional details for audit trail purposes.",
            "example": "ip 123.321.23.1 device e1242lk2l3kl uid 32123123123aja t&c v1.002 app v2.23.00"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "updatedDate": {
            "$ref": "#/components/schemas/dateTime"
          }
        }
      },
      "distributionSliceModel": {
        "required": [
          "targetUserId",
          "weight"
        ],
        "type": "object",
        "properties": {
          "targetUserId": {
            "$ref": "#/components/schemas/userId"
          },
          "targetWalletId": {
            "$ref": "#/components/schemas/walletId"
          },
          "weight": {
            "type": "integer",
            "description": "The weight of the slice.",
            "example": 10000
          },
          "referralId": {
            "$ref": "#/components/schemas/referralId"
          }
        }
      },
      "errorModel": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Standardized error codes.",
            "example": "notFound"
          },
          "message": {
            "type": "string",
            "description": "Explanation and details for error.",
            "example": "Not authorized to access requested resource"
          },
          "attributeName": {
            "type": "string",
            "description": "A request attribute related to the error, if applicable.",
            "example": "iban"
          }
        }
      },
      "favoriteCategoryModel": {
        "type": "object",
        "properties": {
          "categoryId": {
            "$ref": "#/components/schemas/categoryId"
          },
          "name": {
            "$ref": "#/components/schemas/categoryName"
          },
          "isFavorite": {
            "$ref": "#/components/schemas/isFavorite"
          }
        }
      },
      "favoriteStoreModel": {
        "type": "object",
        "properties": {
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          },
          "isFavorite": {
            "$ref": "#/components/schemas/isFavorite"
          },
          "alerts": {
            "type": "boolean",
            "description": "User wants to recieve alert when new deals are available for this store.",
            "example": true
          }
        }
      },
      "friendModel": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "isActive": {
            "$ref": "#/components/schemas/isActive"
          }
        }
      },
      "giftcardModel": {
        "type": "object",
        "properties": {
          "giftcardId": {
            "$ref": "#/components/schemas/giftcardId"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "name": {
            "$ref": "#/components/schemas/giftcardName"
          },
          "description": {
            "type": "string",
            "description": "Description about the giftcard.",
            "example": "Amazon offers a huge range of products from DVDs and books, to furniture, food, and jewellery. Whatever you need, Amazon will probably have it! With opportunities for free super saver delivery from all around the world, Amazon is a great place for a variation of shopping needs."
          },
          "imageUrl": {
            "$ref": "#/components/schemas/giftcardImageUrl"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          }
        }
      },
      "mailingListModel": {
        "type": "object",
        "properties": {
          "mailingListId": {
            "$ref": "#/components/schemas/mailingListId"
          },
          "description": {
            "type": "string",
            "description": "Name of mailinglist in culture of user.",
            "example": "Personal offers (weekly)"
          },
          "isActive": {
            "$ref": "#/components/schemas/isActive"
          }
        }
      },
      "messageModel": {
        "type": "object",
        "properties": {
          "notification": {
            "$ref": "#/components/schemas/notificationModel"
          },
          "promotion": {
            "$ref": "#/components/schemas/promotionModel"
          },
          "ticket": {
            "$ref": "#/components/schemas/ticketMessageModel"
          }
        }
      },
      "notificationModel": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/messageId"
          },
          "type": {
            "$ref": "#/components/schemas/messageType"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "status": {
            "$ref": "#/components/schemas/messageStatus"
          },
          "message": {
            "type": "string",
            "description": "Single line message content in culture of user.",
            "example": "Details of your transaction will be visible in your account the next business day."
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          }
        }
      },
      "paginationModel": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Number of the page returned.",
            "example": 1
          },
          "limit": {
            "type": "integer",
            "description": "Max page size.",
            "example": 100
          },
          "total": {
            "type": "integer",
            "description": "Total number of results on all pages.",
            "example": 153
          },
          "pageCount": {
            "type": "integer",
            "description": "Total number of pages.",
            "example": 2
          }
        }
      },
      "payoutBankModel": {
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/iban"
          },
          "RemittanceInformation": {
            "type": "string",
            "description": "Payout description used as remittance information.",
            "example": "Cashback payment-123"
          }
        }
      },
      "payoutGiftcardModel": {
        "type": "object",
        "properties": {
          "giftcardId": {
            "$ref": "#/components/schemas/giftcardId"
          },
          "name": {
            "$ref": "#/components/schemas/giftcardName"
          }
        }
      },
      "payoutModel": {
        "type": "object",
        "properties": {
          "payoutId": {
            "$ref": "#/components/schemas/payoutId"
          },
          "walletId": {
            "$ref": "#/components/schemas/walletId"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "iban": {
            "$ref": "#/components/schemas/iban"
          },
          "details": {
            "type": "string",
            "description": "Payout description used as remittance information.",
            "example": "Cashback payment-123"
          },
          "status": {
            "$ref": "#/components/schemas/payoutStatus"
          },
          "rejectionMessage": {
            "type": "string",
            "description": "Reason of rejection in case of status = declined.",
            "example": "Account blocked by bank"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "updatedDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "paidDate": {
            "$ref": "#/components/schemas/date"
          }
        }
      },
      "payoutModelV2": {
        "type": "object",
        "properties": {
          "payoutId": {
            "$ref": "#/components/schemas/payoutId"
          },
          "uniqueCode": {
            "$ref": "#/components/schemas/uniqueCode"
          },
          "walletId": {
            "$ref": "#/components/schemas/walletId"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "bank": {
            "$ref": "#/components/schemas/payoutBankModel"
          },
          "giftcard": {
            "$ref": "#/components/schemas/payoutGiftcardModel"
          },
          "paypal": {
            "$ref": "#/components/schemas/payoutPaypalModel"
          },
          "status": {
            "$ref": "#/components/schemas/payoutStatus"
          },
          "rejectionMessage": {
            "type": "string",
            "description": "Reason of rejection in case of status = declined.",
            "example": "Account blocked by bank"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "updatedDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "paidDate": {
            "$ref": "#/components/schemas/date"
          }
        }
      },
      "payoutPaypalModel": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "RemittanceInformation": {
            "type": "string",
            "description": "Payout description used as remittance information.",
            "example": "Cashback payment-123"
          }
        }
      },
      "payoutRequestBankModel": {
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/iban"
          },
          "accountHoldername": {
            "$ref": "#/components/schemas/bankAccountHolderName"
          },
          "accountHolderDateOfBirth": {
            "$ref": "#/components/schemas/date"
          },
          "accountHolderCity": {
            "$ref": "#/components/schemas/AccountHolderCity"
          },
          "remittanceInformation": {
            "maxLength": 100,
            "type": "string",
            "description": "Description to be put on the transaction in the bank account. This will be extended with the OB internal ID of the payout.",
            "example": "PartnerName Cashback"
          }
        }
      },
      "payoutRequestGiftcardModel": {
        "type": "object",
        "properties": {
          "giftcardId": {
            "$ref": "#/components/schemas/giftcardId"
          }
        }
      },
      "payoutRequestPaypalModel": {
        "type": "object",
        "properties": {
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "remittanceInformation": {
            "maxLength": 100,
            "type": "string",
            "description": "Description to be put on the transaction in the paypal account. This will be extended with the OB internal ID of the payout.",
            "example": "PartnerName Cashback"
          }
        }
      },
      "payoutRestrictionsModel": {
        "type": "object",
        "properties": {
          "hasPendingPayout": {
            "type": "boolean",
            "description": "Indication whether the user has a pending payout or not. A new payout request is not allowed as long as a pending payout exists.",
            "example": false
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "amountMinimum": {
            "$ref": "#/components/schemas/amount"
          },
          "amountMaximum": {
            "$ref": "#/components/schemas/amount"
          },
          "allowedIncrement": {
            "type": "number",
            "description": "The exact allowed increase above payoutAmountMinimum. This increase can only be in multiples of the increment.",
            "example": 0.01
          }
        },
        "description": "Restrictions applicable for new payouts responses."
      },
      "promotionModel": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/messageId"
          },
          "type": {
            "$ref": "#/components/schemas/messageType"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "status": {
            "$ref": "#/components/schemas/messageStatus"
          },
          "message": {
            "type": "string",
            "description": "Single line message content in culture of user.",
            "example": "Receive a frame in your choice of color from Samsung"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          },
          "dealId": {
            "$ref": "#/components/schemas/dealId"
          },
          "untilDate": {
            "$ref": "#/components/schemas/date"
          }
        }
      },
      "recruitmentCostsModel": {
        "type": "object",
        "properties": {
          "annualCosts": {
            "type": "number",
            "description": "Annual costs billed to the user.",
            "example": 10.2
          },
          "paymentMethod": {
            "type": "string",
            "description": "Optional specification membership payment method for annualCosts. Defaults to \"Senicom\" in case not provided in request: Senicom: Default payment method. User will recieve invoice by email. None: In case the membership is pre paid.",
            "enum": [
              "Senicom",
              "None"
            ]
          },
          "incentiveCosts": {
            "type": "number",
            "description": "Incentive costs to register user.",
            "example": 1
          }
        }
      },
      "recruitmentTagsModel": {
        "type": "object",
        "properties": {
          "recruitmentMedium": {
            "type": "string",
            "description": "Recruitment medium used to register user.",
            "example": "Medium"
          },
          "recruitmentSource": {
            "type": "string",
            "description": "Recruitment source used to register user.",
            "example": "Source"
          },
          "recruitmentCampaign": {
            "type": "string",
            "description": "Recruitment campgain used to register user.",
            "example": "Campaign"
          },
          "recruitmentChannel": {
            "type": "string",
            "description": "Recruitment channel used to register user.",
            "example": "Campaign"
          }
        }
      },
      "storeModel": {
        "type": "object",
        "properties": {
          "storeId": {
            "$ref": "#/components/schemas/storeId"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "name": {
            "$ref": "#/components/schemas/storeName"
          },
          "isActive": {
            "$ref": "#/components/schemas/isActive"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short store description.",
            "example": "A Swiss company focused on innovation and quality, Logitech designs products and experiences that have an everyday place in people's lives."
          },
          "fullDescription": {
            "type": "string",
            "description": "Long store description, markdown formatted.",
            "example": "A Swiss company focused on innovation and quality, Logitech designs products and experiences that have an everyday place in people's lives. Since those early days, we have expanded both our expertise in product design and our global reach. For each of our products, we focus on how our customers connect and interact with the digital world. We keep design at the center of everything we create, in every team and every discipline, to create truly unique and meaningful experiences. With products sold in almost every country in the world, Logitech has developed into a multi-brand company designing products that bring people together through music, gaming, video and computing. Brands of Logitech include Logitech, Logitech G, ASTRO Gaming, Ultimate Ears, Jaybird, Blue Microphones, and Streamlabs."
          },
          "termAndConditions": {
            "type": "string",
            "description": "Additional remarks on cashback term and conditions, markdown formatted.",
            "example": "Please note: only one purchase per customer."
          },
          "additionalInfo": {
            "type": "string",
            "description": "General information on cashback earning, markdown formatted.",
            "example": "Cashback from Logitech will be granted for actual, registered purchases which are done directly, without visits to other websites during purchase. These purchases should also be done fully online, without telephone or other contact with Logitech. Never use any discount codes from other websites. Also always accept cookies on our website and on the webshop you are shopping at. That way your transaction will be registered correctly and you will receive cashback. Cashback will be calculated on the basis of the purchase amount, exclusive of VAT and other additional costs such as shipping, use of gift vouchers and booking and administration fees. Purchases should show in your account within 48 hours. This might take longer in rare cases. The approval term of purchases differs per store, varying from 2 weeks to a few months. Despite 99% of purchases being registered correctly, it could happen that something goes wrong during the registration process. If this is the case in your situation, please send a Claim Cashback ticket within 30 days of purchase date. We unfortunately cannot track older purchases. You cannot request cashback compensations for online casinos only."
          },
          "categoryIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryId"
            }
          },
          "competitorStoreIds": {
            "type": "array",
            "description": "In case the store is inactive, optionally related competitor storeIds can be returned as array.",
            "items": {
              "$ref": "#/components/schemas/storeId"
            }
          },
          "webUrl": {
            "type": "string",
            "description": "Url for store without tracking links.",
            "format": "url",
            "example": "https://www.logitech.com/en-gb"
          },
          "logoUrl": {
            "$ref": "#/components/schemas/storeLogoUrl"
          },
          "logoSquareUrl": {
            "$ref": "#/components/schemas/storeLogoSquareUrl"
          },
          "urlPathSegment": {
            "$ref": "#/components/schemas/storeUrlPathSegment"
          },
          "type": {
            "$ref": "#/components/schemas/storeType"
          },
          "deals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dealModel"
            }
          },
          "currencyDefaultDeal": {
            "$ref": "#/components/schemas/dealModel"
          },
          "currencyDefaultDealId": {
            "$ref": "#/components/schemas/dealId"
          },
          "percentageDefaultDeal": {
            "$ref": "#/components/schemas/dealModel"
          },
          "percentageDefaultDealId": {
            "$ref": "#/components/schemas/dealId"
          },
          "statistics": {
            "$ref": "#/components/schemas/storeStatisticsModel"
          }
        }
      },
      "storeSummaryModel": {
        "type": "object",
        "properties": {
          "storeId": {
            "$ref": "#/components/schemas/storeId"
          },
          "name": {
            "$ref": "#/components/schemas/storeName"
          },
          "logoUrl": {
            "$ref": "#/components/schemas/storeLogoUrl"
          },
          "logoSquareUrl": {
            "$ref": "#/components/schemas/storeLogoSquareUrl"
          },
          "urlPathSegment": {
            "$ref": "#/components/schemas/storeUrlPathSegment"
          }
        }
      },
      "storeStatisticsModel": {
        "type": "object",
        "properties": {
          "registrationHours": {
            "type": "number",
            "description": "Lead time average between order date and cashback record creation for given store, expressed in full hours.",
            "example": 28
          },
          "confirmationHours": {
            "type": "number",
            "description": "Lead time average between cashback record creation and cashback record confirmation for given store, expressed in full hours.",
            "example": 281
          },
          "rejectionRate": {
            "type": "number",
            "description": "Rejected cashbacks expressed in proportion to the total number of cashbacks, decimal value [0, 1].",
            "example": 0.2
          },
          "reliabilityRate": {
            "type": "number",
            "description": "Reliability of cashback tracking expressed in proportion to total number of cashback (incl compensations) registered for the store, decimal value [0, 1].",
            "example": 0.99
          },
          "reviewRate": {
            "type": "number",
            "description": "Average review rate given by users, decimal value [0, 1].",
            "example": 0.6
          },
          "reviewCount": {
            "type": "number",
            "description": "Number of reviews given by users.",
            "example": 482
          }
        }
      },
      "themeModel": {
        "type": "object",
        "properties": {
          "themeId": {
            "$ref": "#/components/schemas/themeId"
          },
          "name": {
            "$ref": "#/components/schemas/themeName"
          },
          "title": {
            "$ref": "#/components/schemas/themeTitle"
          },
          "description": {
            "type": "string",
            "description": "more details about themepage.",
            "example": "Get ready for back to school sale and let us make the school fun!"
          },
          "navigationIcon": {
            "$ref": "#/components/schemas/navigationIcon"
          },
          "navigationName": {
            "$ref": "#/components/schemas/navigationName"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "urlPathSegment": {
            "$ref": "#/components/schemas/themeUrlPathSegment"
          },
          "bannerImageUrl": {
            "$ref": "#/components/schemas/themeBannerImageUrl"
          }
        }
      },
      "ticketMessageModel": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/messageId"
          },
          "type": {
            "$ref": "#/components/schemas/messageType"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "status": {
            "$ref": "#/components/schemas/messageStatus"
          },
          "subject": {
            "type": "string",
            "description": "Ticket subject.",
            "example": "My account"
          },
          "message": {
            "type": "string",
            "description": "Response message send by customer support.",
            "example": "This is a customer support response message. We have solved your issue."
          },
          "ticketId": {
            "type": "string",
            "description": "Unique identifier for ticket in customer support system.",
            "example": "ZDAA12313"
          },
          "ticketStatus": {
            "$ref": "#/components/schemas/ticketStatus"
          }
        }
      },
      "ticketModel": {
        "type": "object",
        "properties": {
          "ticketId": {
            "$ref": "#/components/schemas/ticketId"
          },
          "type": {
            "$ref": "#/components/schemas/ticketType"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "status": {
            "$ref": "#/components/schemas/ticketStatus"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          },
          "purchaseDate": {
            "$ref": "#/components/schemas/date"
          },
          "orderNumber": {
            "type": "string",
            "description": "Unique identifier for the online order as used by the store.",
            "example": "AB-123"
          },
          "purchaseAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "remarks": {
            "type": "string",
            "description": "Remarks provided by user.",
            "example": "My purchage at this store is not tracked. Please see attached invoice."
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attachmentUrl"
            }
          },
          "replies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketReplyModel"
            }
          }
        }
      },
      "ticketReplyModel": {
        "type": "object",
        "properties": {
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "remarks": {
            "type": "string",
            "description": "Reply provided by user or admin.",
            "example": "Thank you for your response. I don't agree with it. Please reconsider my ticket."
          },
          "role": {
            "type": "string",
            "description": "admin: The reply is provided by an admin. user: The reply is provided by an user.",
            "enum": [
              "admin",
              "user"
            ]
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/attachmentUrl"
            }
          }
        }
      },
      "ticketSummaryModel": {
        "type": "object",
        "properties": {
          "ticketId": {
            "$ref": "#/components/schemas/ticketId"
          },
          "ticketType": {
            "$ref": "#/components/schemas/ticketType"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "status": {
            "$ref": "#/components/schemas/ticketStatus"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          }
        }
      },
      "transactionModel": {
        "type": "object",
        "properties": {
          "transactionId": {
            "$ref": "#/components/schemas/transactionId"
          },
          "userId": {
            "$ref": "#/components/schemas/userId"
          },
          "walletId": {
            "$ref": "#/components/schemas/walletId"
          },
          "eventSource": {
            "$ref": "#/components/schemas/transactionEventSource"
          },
          "eventSourceId": {
            "$ref": "#/components/schemas/transactionEventSourceId"
          },
          "referralId": {
            "$ref": "#/components/schemas/referralId"
          },
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          },
          "status": {
            "$ref": "#/components/schemas/transactionStatus"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          },
          "description": {
            "type": "string",
            "description": "Transaction description.",
            "example": "e-Bay order"
          },
          "orderAmount": {
            "$ref": "#/components/schemas/amount"
          },
          "orderDate": {
            "$ref": "#/components/schemas/date"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "updatedDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "relatedTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/transactionModel"
            }
          }
        }
      },
      "userModel": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/userId"
          },
          "firstName": {
            "$ref": "#/components/schemas/firstName"
          },
          "lastName": {
            "$ref": "#/components/schemas/lastName"
          },
          "email": {
            "$ref": "#/components/schemas/email"
          },
          "emailRequested": {
            "$ref": "#/components/schemas/email"
          },
          "gender": {
            "$ref": "#/components/schemas/gender"
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/date"
          },
          "culture": {
            "$ref": "#/components/schemas/culture"
          },
          "status": {
            "$ref": "#/components/schemas/userStatus"
          },
          "type": {
            "$ref": "#/components/schemas/userType"
          },
          "dateCreated": {
            "$ref": "#/components/schemas/dateTime"
          },
          "address": {
            "$ref": "#/components/schemas/addressModel"
          }
        }
      },
      "walletModel": {
        "type": "object",
        "properties": {
          "walletId": {
            "$ref": "#/components/schemas/walletId"
          },
          "userId": {
            "$ref": "#/components/schemas/userId"
          },
          "name": {
            "type": "string",
            "description": "Wallet name.",
            "example": "My default wallet"
          },
          "isDefault": {
            "type": "boolean",
            "description": "this wallet acts as default wallet for user.",
            "example": true
          },
          "status": {
            "$ref": "#/components/schemas/walletStatus"
          },
          "startDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "endDate": {
            "$ref": "#/components/schemas/dateTime"
          },
          "creationDate": {
            "$ref": "#/components/schemas/dateTime"
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "banners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bannerModel"
            }
          }
        }
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categoryModel"
            }
          }
        }
      },
      "inline_response_200_2": {
        "type": "object",
        "properties": {
          "redirectUrl": {
            "type": "string",
            "description": "Target url to refer the user to.",
            "format": "url",
            "example": "https://www.bol.com?ref=123"
          },
          "subId": {
            "$ref": "#/components/schemas/clickSubId"
          },
          "store": {
            "$ref": "#/components/schemas/storeSummaryModel"
          }
        }
      },
      "inline_response_200_3": {
        "type": "object",
        "properties": {
          "eventType": {
            "$ref": "#/components/schemas/confirmationEventType"
          },
          "status": {
            "$ref": "#/components/schemas/confirmationStatus"
          }
        }
      },
      "inline_response_200_4": {
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/userId"
          }
        }
      },
      "inline_response_200_5": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "deals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dealModel"
            }
          }
        }
      },
      "inline_response_200_6": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "giftcards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/giftcardModel"
            }
          }
        }
      },
      "inline_response_200_7": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "stores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/storeModel"
            }
          }
        }
      },
      "inline_response_200_8": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/amount"
          },
          "currency": {
            "$ref": "#/components/schemas/currency"
          }
        }
      },
      "inline_response_200_9": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/themeModel"
            }
          }
        }
      },
      "inline_response_200_10": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          }
        }
      },
      "inline_response_200_11": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/balanceModel"
            }
          }
        }
      },
      "inline_response_200_12": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "clicks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/clickModel"
            }
          }
        }
      },
      "inline_response_200_13": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "directDebitMandates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/directDebitMandateModel"
            }
          }
        }
      },
      "inline_response_200_14": {
        "type": "object",
        "properties": {
          "directDebitMandate": {
            "$ref": "#/components/schemas/directDebitMandateModel"
          }
        }
      },
      "inline_response_200_15": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "slices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/distributionSliceModel"
            }
          }
        }
      },
      "inline_response_200_16": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "favoriteCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/favoriteCategoryModel"
            }
          }
        }
      },
      "inline_response_200_17": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "favoriteStores": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/favoriteStoreModel"
            }
          }
        }
      },
      "inline_response_200_18": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "friends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/friendModel"
            }
          }
        }
      },
      "inline_response_200_19": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "mailingLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/mailingListModel"
            }
          }
        }
      },
      "inline_response_200_20": {
        "type": "object",
        "properties": {
          "fromDate": {
            "$ref": "#/components/schemas/date"
          },
          "untilDate": {
            "$ref": "#/components/schemas/date"
          }
        }
      },
      "inline_response_200_21": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/messageModel"
            }
          }
        }
      },
      "inline_response_200_22": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "payoutRestrictions": {
            "$ref": "#/components/schemas/payoutRestrictionsModel"
          },
          "payouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payoutModel"
            }
          }
        },
        "description": "A paginated response model that returns user payouts."
      },
      "inline_response_200_23": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "payoutRestrictions": {
            "$ref": "#/components/schemas/payoutRestrictionsModel"
          },
          "payouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/payoutModelV2"
            }
          }
        },
        "description": "A paginated response model that returns user payouts."
      },
      "inline_response_200_24": {
        "type": "object",
        "properties": {
          "autoFavoriteStores": {
            "type": "boolean",
            "description": "Add stores to favorites after tracked cashback.",
            "example": true
          }
        }
      },
      "inline_response_200_25": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ticketSummaryModel"
            }
          }
        }
      },
      "inline_response_200_26": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/transactionModel"
            }
          }
        }
      },
      "inline_response_200_27": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/paginationModel"
          },
          "wallets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/walletModel"
            }
          }
        }
      }
    },
    "responses": {
      "bannersResponse": {
        "description": "A paginated response model that returns website banners.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200"
            }
          }
        }
      },
      "categoriesResponse": {
        "description": "A paginated response model that returns categories.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_1"
            }
          }
        }
      },
      "clickRedirectResponse": {
        "description": "A response model that returns redirect information.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_2"
            }
          }
        }
      },
      "confirmationResponse": {
        "description": "A response model that returns the confirmation result.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_3"
            }
          }
        }
      },
      "dealResponse": {
        "description": "A response model that returns a deal.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/dealModel"
            }
          }
        }
      },
      "dealsResponse": {
        "description": "A paginated response model that returns deals.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_5"
            }
          }
        }
      },
      "errorBadRequestResponse": {
        "description": "Bad request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/errorModel"
              }
            }
          }
        }
      },
      "errorUnauthorizedResponse": {
        "description": "Unauthorized.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/errorModel"
              }
            }
          }
        }
      },
      "errorUnprocessableEntityResponse": {
        "description": "Unable to process the contained instructions.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/errorModel"
              }
            }
          }
        }
      },
      "giftcardResponse": {
        "description": "A paginated response model that returns active giftcards.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_6"
            }
          }
        }
      },
      "passwordLostResetResponse": {
        "description": "A response model that is returned on successfull password reset.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_4"
            }
          }
        }
      },
      "storeCalculationResponse": {
        "description": "A response model that returns a cashback calculation result.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_8"
            }
          }
        }
      },
      "storeResponse": {
        "description": "A response model that returns a store.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/storeModel"
            }
          }
        }
      },
      "storesResponse": {
        "description": "A paginated response model that returns stores.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_7"
            }
          }
        }
      },
      "successResponse": {
        "description": "A response model that returns success.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_10"
            }
          }
        }
      },
      "themesResponse": {
        "description": "A paginized response model that returns themes.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_9"
            }
          }
        }
      },
      "userBalanceResponse": {
        "description": "A paginized response model that returns a user balance.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_11"
            }
          }
        }
      },
      "userBankAccountResponse": {
        "description": "A response model that returns an bank account.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bankAccountModel"
            }
          }
        }
      },
      "userClickResponse": {
        "description": "A response model that returns a click.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/clickModel"
            }
          }
        }
      },
      "userClicksResponse": {
        "description": "A paginized response model that returns all clicks.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_12"
            }
          }
        }
      },
      "userDirectDebitMandatesResponse": {
        "description": "A response model that returns all direct debit mandate information.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_13"
            }
          }
        }
      },
      "userDirectDebitMandateResponse": {
        "description": "A response model that returns a direct debit mandate.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_14"
            }
          }
        }
      },
      "userDistributionsResponse": {
        "description": "A paginized response model that returns a distribution model.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_15"
            }
          }
        }
      },
      "userFavoriteCategoriesResponse": {
        "description": "A paginated response model that returns user favorite categories.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_16"
            }
          }
        }
      },
      "userFavoriteStoreResponse": {
        "description": "A response model that returns user favorite setting for a store.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/favoriteStoreModel"
            }
          }
        }
      },
      "userFavoriteStoresResponse": {
        "description": "A paginated response model that returns user favorite stores.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_17"
            }
          }
        }
      },
      "userFriendsResponse": {
        "description": "A paginated response model that returns user friends.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_18"
            }
          }
        }
      },
      "userMailingListResponse": {
        "description": "A response model that returns a mailing list.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/mailingListModel"
            }
          }
        }
      },
      "userMailingListsResponse": {
        "description": "A paginated response model that returns mailing lists.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_19"
            }
          }
        }
      },
      "userMailingListsSuspendResponse": {
        "description": "A response model that returns the mailing list suspend dates.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_20"
            }
          }
        }
      },
      "userMessageResponse": {
        "description": "A response model that returns an user message.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/messageModel"
            }
          }
        }
      },
      "userMessagesResponse": {
        "description": "A paginated response model that returns user messages.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_21"
            }
          }
        }
      },
      "userPayoutResponse": {
        "description": "A response model that returns a payouts.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payoutModel"
            }
          }
        }
      },
      "userPayoutResponseV2": {
        "description": "A response model that returns a payout.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/payoutModelV2"
            }
          }
        }
      },
      "userPayoutsResponse": {
        "description": "A paginated response model that returns user payouts.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_22"
            }
          }
        }
      },
      "userPayoutsResponseV2": {
        "description": "A paginated response model that returns user payouts.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_23"
            }
          }
        }
      },
      "userPreferencesResponse": {
        "description": "A response model that returns user preferences.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_24"
            }
          }
        }
      },
      "userRegisterResponse": {
        "description": "A response model that returns a registered user.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/userModel"
            }
          }
        }
      },
      "userResponse": {
        "description": "A response model that returns a user.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/userModel"
            }
          }
        }
      },
      "userTicketResponse": {
        "description": "A response model that returns a ticket.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ticketModel"
            }
          }
        }
      },
      "userTicketsResponse": {
        "description": "A paginated response model that returns user tickets.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_25"
            }
          }
        }
      },
      "userTransactionResponse": {
        "description": "A response model that returns a transactions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/transactionModel"
            }
          }
        }
      },
      "userTransactionsResponse": {
        "description": "A paginated response model that returns user transactions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_26"
            }
          }
        }
      },
      "userWalletResponse": {
        "description": "A response model that returns a wallet.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/walletModel"
            }
          }
        }
      },
      "userWalletsResponse": {
        "description": "A paginated response model that returns user wallets.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_27"
            }
          }
        }
      },
      "walletBalanceResponse": {
        "description": "A paginized response model that returns a wallet balance.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_response_200_11"
            }
          }
        }
      }
    },
    "parameters": {
      "amountQuery": {
        "name": "amount",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "number",
          "description": "Exclude giftcards with a larger amount than given in query, 2 decimals.",
          "example": 25
        }
      },
      "bannerTypeArrayQuery": {
        "name": "type[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/bannerType"
          }
        }
      },
      "categoryIdArrayQuery": {
        "name": "categoryId[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/categoryId"
          }
        }
      },
      "categoryIdPath": {
        "name": "categoryId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/categoryId"
        }
      },
      "categoryUrlPathSegmentQuery": {
        "name": "urlPathSegment",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/categoryUrlPathSegment"
        }
      },
      "channelQuery": {
        "name": "channel",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/channel"
        }
      },
      "clickIdPath": {
        "name": "clickId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/clickId"
        }
      },
      "cultureQuery": {
        "name": "culture",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/culture"
        }
      },
      "cultureRequiredQuery": {
        "name": "culture",
        "in": "query",
        "required": true,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/culture"
        }
      },
      "dealFilterQuery": {
        "name": "filter",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "description": "adminTop: Returns deals marked by content management as top deals. expiring: Returns deals ordered by expiry date ascending. newest: Returns deals ordered by creation date descending. popular: Returns deals marked by content management as top deals.  themeBase: Returns deals not marked as top deal for themeId. Requires themeId query. themeTop: Returns deals marked as top deal for themeId. Requires themeId query.",
          "enum": [
            "adminTop",
            "expiring",
            "newest",
            "popular",
            "themeBase",
            "themeTop"
          ]
        }
      },
      "dealIdPath": {
        "name": "dealId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/dealId"
        }
      },
      "dealIsExclusiveQuery": {
        "name": "isExclusive",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/dealIsExclusive"
        }
      },
      "dealTypeQuery": {
        "name": "dealType",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/dealType"
        }
      },
      "dealTypeArrayQuery": {
        "name": "dealType[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/dealType"
          }
        }
      },
      "deleteUserQuery": {
        "name": "deleteOptions",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "required": [
            "optOutType"
          ],
          "type": "object",
          "properties": {
            "optOutType": {
              "$ref": "#/components/schemas/userOptOutType"
            },
            "Reason": {
              "type": "string",
              "description": "Optional free text reason for opt out.",
              "example": "I don't want to make use of your services."
            }
          }
        }
      },
      "depthQuery": {
        "name": "depth",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "description": "Exclude categories with larger depth from root or given parentId.",
          "example": 2
        }
      },
      "directDebitMandateIdPath": {
        "name": "directDebitMandateId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/directDebitMandateId"
        }
      },
      "endDateQuery": {
        "name": "endDate",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "hasDealsQuery": {
        "name": "hasDeals",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "boolean"
        }
      },
      "keywordsQuery": {
        "name": "keywords",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string"
        }
      },
      "mailingListIdPath": {
        "name": "mailingListId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/mailingListId"
        }
      },
      "messageIdPath": {
        "name": "messageId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/messageId"
        }
      },
      "messageStatusQuery": {
        "name": "messageStatus",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/messageStatus"
        }
      },
      "messageTypeArrayQuery": {
        "name": "messageType[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/messageType"
          }
        }
      },
      "paginationLimitQuery": {
        "name": "limit",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "description": "Maximum page size.",
          "example": 100
        }
      },
      "paginationPageQuery": {
        "name": "page",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "integer",
          "description": "Number of the page returned",
          "example": 1
        }
      },
      "parentCategoryIdQuery": {
        "name": "parentId",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/categoryId"
        }
      },
      "payoutIdPath": {
        "name": "payoutId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/payoutId"
        }
      },
      "payoutMethodArrayQuery": {
        "name": "payoutMethod[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/payoutMethod"
          }
        }
      },
      "payoutStatusQuery": {
        "name": "payoutStatus",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/payoutStatus"
        }
      },
      "referralIdQuery": {
        "name": "referralId",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/referralId"
        }
      },
      "sourceUserIdQuery": {
        "name": "sourceUserId",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/userId"
        }
      },
      "startDateQuery": {
        "name": "startDate",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/dateTime"
        }
      },
      "storeFilterQuery": {
        "name": "filter",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "string",
          "enum": [
            "highestCommision",
            "highestCashBack",
            "adminTop",
            "mostClicked",
            "mostTransactions",
            "newestStores",
            "foreignStores"
          ]
        }
      },
      "storeIdArrayQuery": {
        "name": "storeId[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/storeId"
          }
        }
      },
      "storeIdPath": {
        "name": "storeId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/storeId"
        }
      },
      "storeUrlPathSegmentQuery": {
        "name": "urlPathSegment",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/storeUrlPathSegment"
        }
      },
      "subIdQuery": {
        "name": "subId",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/clickSubId"
        }
      },
      "themeIdQuery": {
        "name": "themeId",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/themeId"
        }
      },
      "ticketIdPath": {
        "name": "ticketId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/ticketId"
        }
      },
      "transactionEventSourceArrayQuery": {
        "name": "eventSource[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/transactionEventSource"
          }
        }
      },
      "transactionIdPath": {
        "name": "transactionId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/transactionId"
        }
      },
      "transactionStatusArrayQuery": {
        "name": "status[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/transactionStatus"
          }
        }
      },
      "uniqueCode": {
        "name": "uniqueCode",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/uniqueCode"
        }
      },
      "userIdPath": {
        "name": "userId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/userId"
        }
      },
      "walletGroupByQuery": {
        "name": "groupBy[]",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Group the result per wallet, source user, and or per referralId.",
            "example": "walletId",
            "enum": [
              "referralId",
              "sourceUserId",
              "walletId"
            ]
          }
        }
      },
      "walletIdPath": {
        "name": "walletId",
        "in": "path",
        "required": true,
        "style": "simple",
        "explode": false,
        "schema": {
          "$ref": "#/components/schemas/walletId"
        }
      },
      "walletIdQuery": {
        "name": "walletId",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/walletId"
        }
      },
      "walletStatusQuery": {
        "name": "walletStatus",
        "in": "query",
        "required": false,
        "style": "form",
        "explode": true,
        "schema": {
          "$ref": "#/components/schemas/walletStatus"
        }
      }
    },
    "requestBodies": {
      "clickRequest": {
        "description": "A request to generate and regiter a redirect url.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "channel",
                "eventSource",
                "eventSourceId"
              ],
              "type": "object",
              "properties": {
                "eventSource": {
                  "$ref": "#/components/schemas/clickEventSource"
                },
                "eventSourceId": {
                  "$ref": "#/components/schemas/clickEventSourceId"
                },
                "channel": {
                  "$ref": "#/components/schemas/channel"
                },
                "userId": {
                  "$ref": "#/components/schemas/userId"
                },
                "ipAddressWan": {
                  "$ref": "#/components/schemas/ipAddressWan"
                }
              }
            }
          }
        }
      },
      "confirmationRequest": {
        "description": "A request to confirm a confirmationToken.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "confirmationToken"
              ],
              "type": "object",
              "properties": {
                "confirmationToken": {
                  "$ref": "#/components/schemas/confirmationToken"
                }
              }
            }
          }
        }
      },
      "directDebitMandateStatusRequest": {
        "description": "A request to set the direct debit mandate status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "isActive": {
                  "$ref": "#/components/schemas/isActive"
                }
              }
            }
          }
        }
      },
      "passwordResetRequest": {
        "description": "A request to request a password reset.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "email"
              ],
              "type": "object",
              "properties": {
                "username": {
                  "$ref": "#/components/schemas/email"
                }
              }
            }
          }
        }
      },
      "passwordLostResetRequest": {
        "description": "A request to submit a new password during password reset.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "confirmationToken",
                "password"
              ],
              "type": "object",
              "properties": {
                "confirmationToken": {
                  "$ref": "#/components/schemas/confirmationToken"
                },
                "password": {
                  "$ref": "#/components/schemas/password"
                }
              }
            }
          }
        }
      },
      "storeCalculationRequest": {
        "description": "A request to calculate cashback on a purchage at the store.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "orderAmount"
              ],
              "type": "object",
              "properties": {
                "orderAmount": {
                  "$ref": "#/components/schemas/amount"
                },
                "isVatIncluded": {
                  "type": "boolean",
                  "description": "Indicates given orderAmount has VAT included. Defaults as true.",
                  "example": true
                },
                "currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "dealId": {
                  "$ref": "#/components/schemas/dealId"
                }
              }
            }
          }
        }
      },
      "userBankAccountRequest": {
        "description": "A request to set a bank account.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "accountName",
                "addressLine1",
                "iban"
              ],
              "type": "object",
              "properties": {
                "iban": {
                  "$ref": "#/components/schemas/iban"
                },
                "accountName": {
                  "type": "string",
                  "description": "Bank account name / holder name.",
                  "example": "J Doe"
                },
                "accountHolderDateOfBirth": {
                  "$ref": "#/components/schemas/date"
                },
                "accountHolderCity": {
                  "type": "string",
                  "description": "City of residence of account holder.",
                  "example": "Amsterdam"
                }
              }
            }
          }
        }
      },
      "userDistributionsRequest": {
        "description": "A request to save the user cashback distribution model.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "slices"
              ],
              "type": "object",
              "properties": {
                "slices": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/distributionSliceModel"
                  }
                }
              }
            }
          }
        }
      },
      "userEmailChangeRequestRequest": {
        "description": "A request to change the user email.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "$ref": "#/components/schemas/email"
                },
                "ipAddressWan": {
                  "$ref": "#/components/schemas/ipAddressWan"
                }
              }
            }
          }
        }
      },
      "userMailingListSuspendRequest": {
        "description": "A request to set the mailing list suspension period.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "fromDate",
                "untilDate"
              ],
              "type": "object",
              "properties": {
                "fromDate": {
                  "$ref": "#/components/schemas/date"
                },
                "untilDate": {
                  "$ref": "#/components/schemas/date"
                }
              }
            }
          }
        }
      },
      "userMailingListRequest": {
        "description": "A request to set preferences for a mailing list.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "isActive": {
                  "$ref": "#/components/schemas/isActive"
                }
              }
            }
          }
        }
      },
      "userMessageRequest": {
        "description": "A request to set a message as read.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/messageStatus"
                }
              }
            }
          }
        }
      },
      "userMessagesRequest": {
        "description": "A request to set messages for filtered messages as read.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/messageType"
                },
                "status": {
                  "$ref": "#/components/schemas/messageStatus"
                }
              }
            }
          }
        }
      },
      "userPayoutRequest": {
        "description": "A request to submit a payout request.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "accountHolderDateOfBirth",
                "accountName",
                "amount",
                "currency",
                "iban"
              ],
              "type": "object",
              "properties": {
                "walletId": {
                  "$ref": "#/components/schemas/walletId"
                },
                "amount": {
                  "$ref": "#/components/schemas/amount"
                },
                "currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "iban": {
                  "$ref": "#/components/schemas/iban"
                },
                "accountHolderName": {
                  "$ref": "#/components/schemas/bankAccountHolderName"
                },
                "accountHolderDateOfBirth": {
                  "$ref": "#/components/schemas/date"
                },
                "remittanceInformation": {
                  "maxLength": 100,
                  "type": "string",
                  "description": "Description to be put on the transaction in the bank account. This will be extended with the OB internal ID of the payout.",
                  "example": "PartnerName Cashback"
                }
              }
            }
          }
        }
      },
      "userPayoutRequestV2": {
        "description": "A request to submit a payout request.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "amount",
                "currency",
                "uniqueCode"
              ],
              "type": "object",
              "properties": {
                "uniqueCode": {
                  "$ref": "#/components/schemas/uniqueCode"
                },
                "walletId": {
                  "$ref": "#/components/schemas/walletId"
                },
                "amount": {
                  "$ref": "#/components/schemas/amount"
                },
                "currency": {
                  "$ref": "#/components/schemas/currency"
                },
                "bank": {
                  "$ref": "#/components/schemas/payoutRequestBankModel"
                },
                "giftcard": {
                  "$ref": "#/components/schemas/payoutRequestGiftcardModel"
                },
                "paypal": {
                  "$ref": "#/components/schemas/payoutRequestPaypalModel"
                }
              }
            }
          }
        }
      },
      "userPayoutStatusRequest": {
        "description": "A request to save a payout request status.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "status"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/payoutStatus"
                }
              }
            }
          }
        }
      },
      "userPreferencesRequest": {
        "description": "A request to set user preference values.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "autoFavoriteStores": {
                  "type": "boolean",
                  "description": "Add stores to favorites after tracked cashback.",
                  "example": true
                }
              }
            }
          }
        }
      },
      "userRegisterRequest": {
        "description": "A request to register a user.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "authenticationMethod",
                "culture",
                "email"
              ],
              "type": "object",
              "properties": {
                "firstName": {
                  "$ref": "#/components/schemas/firstName"
                },
                "lastName": {
                  "$ref": "#/components/schemas/lastName"
                },
                "email": {
                  "$ref": "#/components/schemas/email"
                },
                "authenticationMethod": {
                  "$ref": "#/components/schemas/userAuthenticationMethod"
                },
                "id": {
                  "$ref": "#/components/schemas/userId"
                },
                "gender": {
                  "$ref": "#/components/schemas/gender"
                },
                "dateOfBirth": {
                  "$ref": "#/components/schemas/date"
                },
                "culture": {
                  "$ref": "#/components/schemas/culture"
                },
                "status": {
                  "$ref": "#/components/schemas/userStatus"
                },
                "ipAddressWan": {
                  "$ref": "#/components/schemas/ipAddressWan"
                }
              }
            }
          }
        }
      },
      "userRegisterSenicomRequest": {
        "description": "A request to register a senicom user.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "address",
                "culture",
                "dateOfBirth",
                "email",
                "firstName",
                "gender",
                "lastName",
                "phone",
                "senicomCampaignId"
              ],
              "type": "object",
              "properties": {
                "senicomCampaignId": {
                  "type": "integer",
                  "description": "links to an senicomCampaignId to resove to price, benefits, conditions.",
                  "example": 1
                },
                "membershipType": {
                  "type": "string",
                  "description": "Optional specification membership type. Defaults to \"Fixed\" in case not provided in request: Fixed: Default membership. Trial: Trial membership.",
                  "enum": [
                    "Fixed",
                    "Trial"
                  ]
                },
                "firstName": {
                  "$ref": "#/components/schemas/firstName"
                },
                "prefix": {
                  "$ref": "#/components/schemas/prefixName"
                },
                "lastName": {
                  "$ref": "#/components/schemas/lastName"
                },
                "email": {
                  "$ref": "#/components/schemas/email"
                },
                "gender": {
                  "$ref": "#/components/schemas/gender"
                },
                "dateOfBirth": {
                  "$ref": "#/components/schemas/date"
                },
                "culture": {
                  "$ref": "#/components/schemas/culture"
                },
                "phone": {
                  "$ref": "#/components/schemas/phone"
                },
                "address": {
                  "$ref": "#/components/schemas/addressModel"
                },
                "ipAddressWan": {
                  "$ref": "#/components/schemas/ipAddressWan"
                },
                "tags": {
                  "$ref": "#/components/schemas/recruitmentTagsModel"
                },
                "costs": {
                  "$ref": "#/components/schemas/recruitmentCostsModel"
                }
              }
            }
          }
        }
      },
      "userRegisterSniptechRequest": {
        "description": "A request to register a Sniptech user.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/userType"
                },
                "autoPayoutLevel": {
                  "$ref": "#/components/schemas/userAutoPayoutLevel"
                },
                "email": {
                  "$ref": "#/components/schemas/email"
                },
                "culture": {
                  "$ref": "#/components/schemas/culture"
                }
              }
            }
          }
        }
      },
      "userRequest": {
        "description": "A request to submit changes of a user.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "$ref": "#/components/schemas/firstName"
                },
                "lastName": {
                  "$ref": "#/components/schemas/lastName"
                },
                "gender": {
                  "$ref": "#/components/schemas/gender"
                },
                "dateOfBirth": {
                  "$ref": "#/components/schemas/date"
                },
                "culture": {
                  "$ref": "#/components/schemas/culture"
                },
                "address": {
                  "$ref": "#/components/schemas/addressModel"
                }
              }
            }
          }
        }
      },
      "userStatusRequest": {
        "description": "A request to set the user status.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/userStatus"
                }
              }
            }
          }
        }
      },
      "userStoreFavoriteRequest": {
        "description": "A request to set the store as favorite for the user.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "storeId"
              ],
              "type": "object",
              "properties": {
                "storeId": {
                  "$ref": "#/components/schemas/storeId"
                },
                "alerts": {
                  "type": "boolean",
                  "description": "User wants to recieve alert when new deals are available for this store, default true.",
                  "example": false
                }
              }
            }
          }
        }
      },
      "userTicketReplyRequest": {
        "description": "A request to add a reply to a ticket.",
        "content": {
          "multipart/form-data:": {
            "schema": {
              "required": [
                "remarks",
                "role"
              ],
              "type": "object",
              "properties": {
                "remarks": {
                  "type": "string",
                  "description": "Reply provided by user or admin.",
                  "example": "Thank you for your response. I don't agree with it. Please reconsider my ticket."
                },
                "role": {
                  "type": "string",
                  "description": "admin: The reply is provided by an admin. user: The reply is provided by an user.",
                  "enum": [
                    "admin",
                    "user"
                  ]
                },
                "attachment": {
                  "type": "string",
                  "description": "rply attachment",
                  "format": "binary"
                }
              }
            }
          }
        }
      },
      "userTicketRequest": {
        "description": "A request to register a ticket for the user.",
        "content": {
          "multipart/form-data": {
            "schema": {
              "required": [
                "remarks",
                "type"
              ],
              "type": "object",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/ticketType"
                },
                "storeId": {
                  "$ref": "#/components/schemas/storeId"
                },
                "transactionId": {
                  "$ref": "#/components/schemas/transactionId"
                },
                "purchaseDate": {
                  "$ref": "#/components/schemas/date"
                },
                "orderNumber": {
                  "type": "string",
                  "description": "Unique identifier for the online order as used by the store.",
                  "example": "AB-123"
                },
                "purchaseAmount": {
                  "$ref": "#/components/schemas/amount"
                },
                "remarks": {
                  "type": "string",
                  "description": "Remarks provided by user.",
                  "example": "My purchage at this store is not tracked. Please see attached invoice."
                },
                "attachment1": {
                  "type": "string",
                  "description": "first attachment",
                  "format": "binary"
                },
                "attachment2": {
                  "type": "string",
                  "description": "second attachment",
                  "format": "binary"
                },
                "attachment3": {
                  "type": "string",
                  "description": "third attachment",
                  "format": "binary"
                },
                "competitorUrl": {
                  "$ref": "#/components/schemas/competitorUrl"
                },
                "cashbackPartner": {
                  "$ref": "#/components/schemas/cashbackPartner"
                },
                "cashbackCompetitor": {
                  "$ref": "#/components/schemas/cashbackCompetitor"
                }
              }
            }
          }
        }
      },
      "userWalletNameRequest": {
        "description": "A request to save a wallet name.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "name"
              ],
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Wallet name.",
                  "example": "My wallet"
                }
              }
            }
          }
        }
      },
      "userWalletRequest": {
        "description": "A request to submit a wallet.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Wallet name.",
                  "example": "My extra wallet"
                },
                "status": {
                  "$ref": "#/components/schemas/walletStatus"
                },
                "startDate": {
                  "$ref": "#/components/schemas/dateTime"
                },
                "endDate": {
                  "$ref": "#/components/schemas/dateTime"
                }
              }
            }
          }
        }
      },
      "userWalletStatusRequest": {
        "description": "A request to save a wallet status.",
        "content": {
          "application/json": {
            "schema": {
              "required": [
                "status"
              ],
              "type": "object",
              "properties": {
                "status": {
                  "$ref": "#/components/schemas/walletStatus"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  }
}